@model Sentinel.ViewModels.HomePageViewModel
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnv

@{
    ViewData["Title"] = "Home Page";
}

<div class="d-flex flex-nowrap mb-2">
    <span class="font-italic mr-1">Found</span>
    <span id="count" class="font-italic mr-1"></span>
    <span id="records-text" class="font-italic mr-3">records</span>
    <span class="text-nowrap mr-2">Filter from</span>
    <input type="date" id="min-date" class="form-control form-control-sm mr-2" />
    <span class="mr-2">to</span>
    <input type="date" id="max-date" class="form-control form-control-sm mr-3" />
    <span class="text-nowrap mr-2">Containing text:</span>
    <input type="text" id="search-text" placeholder="Enter search text..." class="form-control form-control-sm" />
</div>
<div class="d-flex mb-2">
    <select id="applications" class="options-dropdown form-control form-control-sm mr-2">
        <option value="">-- All applications --</option>
        @foreach (var item in Model.Applications)
        {
            <option>@item</option>
        }
    </select>
    <select id="agents" class="options-dropdown form-control form-control-sm mr-2">
        <option value="">-- All user agents --</option>
        @foreach (var item in Model.Agents)
        {
            <option>@item</option>
        }
    </select>
    <select id="os-list" class="options-dropdown form-control form-control-sm mr-2">
        <option value="">-- All OS --</option>
        @foreach (var item in Model.OsList)
        {
            <option>@item</option>
        }
    </select>
    <select id="devices" class="options-dropdown form-control form-control-sm mr-2">
        <option value="">-- All devices --</option>
        @foreach (var item in Model.Devices)
        {
            <option>@item</option>
        }
    </select>
    <button id="go-btn" class="btn btn-sm btn-success mr-2">Go</button>
    <button id="reset-btn" class="btn btn-sm btn-warning">Reset</button>
</div>
<div id="more-div">
    @if (Model.More)
    {
        <span class="text-danger smaller-text font-italic">More then 1000 records found - use the filters to reduce the size of the results...</span>
    }
</div>
<div id="mark-div" class="mb-2" style="visibility: hidden">
    <button id="mark-btn" class="btn btn-sm btn-danger mr-2">Mark selected items as processed</button>
</div>

<div id="error-table">
    <partial name="_partialErrorData.cshtml" for="Errors">
</div>

<div class="modal" id="stack-trace-modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Stack trace</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body max-height-350">
                <code id="stack-trace-content" class="smaller-text"></code>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="source-modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Source</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body max-height-350">
                <code id="source-content" class="smaller-text"></code>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="url-modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">URL</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <code id="url-content" class="smaller-text"></code>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @if (hostingEnv.EnvironmentName == "Production")
    {
        <script src="~/lib/vue/vue.min.js"></script>
    }
    else
    {
        <script src="~/lib/vue/vue.js"></script>
    }
    <script src="~/lib/gsap/gsap.min.js"></script>
    <script asp-add-nonce="true">
        let lastCount = 0;

        function getFilteredData() {
            $('#more-div').hide();
            let appName = $("#applications option:selected").val();
            let userAgent = $("#agents option:selected").val();
            let os = $("#os-list option:selected").val();
            let device = $("#devices option:selected").val();
            let searchText = $("#search-text").val();
            $.get('@Url.Action("GetData", "Home")?appName=' + appName
                + '&userAgent=' + userAgent
                + '&os=' + os
                + '&device=' + device
                + '&searchText=' + searchText
                + '&minDate=' + $('#min-date').val()
                + '&maxDate=' + $('#max-date').val()
            )
            .done((data) => {
                $('#error-table').html(data);
                updateCounter();
                hideShowProcessButton();
            })
            .fail((error) => {
                console.dir(error);
                toastr.error('Error getting data: ' + error.responseText);
            })
        }

        function updateCounter() {
            let count = $('tbody tr').length;
            let obj = { current: lastCount };
            gsap.to(obj, {
                duration: 1.5,
                current: count,
                onUpdate: function () {
                    let countAsInt = Math.round(obj.current);
                    $('#count').html(countAsInt);
                    if (countAsInt == 1) {
                        $('#records-text').html('record');
                    } else {
                        $('#records-text').html('records');
                    }
                },
                onComplete: function () {
                    lastCount = count;
                }
            });
        }

        function hideShowProcessButton() {
            if ($("input:checked").length > 0) {
                $('#mark-div').css('visibility', 'visible');
            } else {
                $('#mark-div').css('visibility', 'hidden');
            }
        }

        $(function () {
            $('[data-toggle="tooltip"]').tooltip();

            $('[type="date"]').prop('max', function () {
                return new Date().toJSON().split('T')[0];
            });

            updateCounter();

            $('body').on('click', '.view-stack-trace', (event) => {
                let id = $(event.currentTarget).data('id');
                $.get('@Url.Action("GetStackTrace", "Home")/' + id)
                    .done((data) => {
                        $('#stack-trace-content').html(data.stackTrace.replace(new RegExp('\r?\n', 'g'), '<br />'));
                        $('#stack-trace-modal').modal('show');
                    })
                    .fail((error) => {
                        toastr.error('Error getting stack trace: ' + error);
                    })
            })
            $('body').on('click', '.view-source', (event) => {
                let id = $(event.currentTarget).data('id');
                $.get('@Url.Action("GetSource", "Home")/' + id)
                    .done((data) => {
                        $('#source-content').html(data.source);
                        $('#source-modal').modal('show');
                    })
                    .fail((error) => {
                        toastr.error('Error getting source: ' + error);
                    })
            })
            $('body').on('click', '.view-url', (event) => {
                let url = $(event.currentTarget).data('url');
                $('#url-content').html(url);
                $('#url-modal').modal('show');
            })
            $('#go-btn').click((event) => {
                getFilteredData();
            })
            $('#reset-btn').click((event) => {
                $('.options-dropdown').val('');
                $('#min-date').val('');
                $('#max-date').val('');
                $("#search-text").val('');
            })
            $('body').on('change', '.event-checkbox', (event) => {
                hideShowProcessButton();
            })
            $('body').on('change', '#check-all', (event) => {
                if ($('#check-all').is(':checked')) {
                    $('[type="checkbox"]').prop('checked', true);
                } else {
                    $('[type="checkbox"]').prop('checked', false);
                }
                hideShowProcessButton();
            })
            $('#mark-btn').click((event) => {
                let idArray = [];
                $('.event-checkbox:checked').each((index, element) => {
                    idArray.push($(element).data('id'));
                })
                let postData = { ids: idArray };
                $.post('@Url.Action("MarkAsProcessed", "Home")', $.param(postData, true))
                    .done(() => {
                        getFilteredData();
                    })
                    .fail((error) => {
                        console.dir(error);
                        toastr.error('Error marking as processed: ' + error.responseText);
                    })
            })
        })
    </script>
}
